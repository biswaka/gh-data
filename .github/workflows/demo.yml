name: Deploy website
on:
  push:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache Dependencies
        uses: actions/cache@v4 
        with:
          path: ~/.npm #path of the files and Folders that you want to cache, This is the path used by this npm tool
                       #for its internal dependency cache

          # And then we must give this cache a key.And the idea is that this key will be used for retrieving the cache 
          # in the futureand recreating that folder on the runner machine based on that cache managed by GitHub in the future.
          # But the key also indicates whether the cache should be discarded because it must be recreated because, 
          # for example, some dependency changed. Therefore, you wanna give this cache a name
          # that's not fully static and hard coded but that contains some dynamic element that can change 
          # and that will change whenever the cache should be discarded.
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:  #to generate and share outputs
      script-file: ${{ steps.publish.outputs.step-script-file }}   #script-file is variable, TO SET OVERALL OUTPUT FOR A JOB; steps is context
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache Dependencies
        uses: actions/cache@v4 
        with:
          path: ~/.npm         
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build # Gives Output folder 'dist', which we can upload to a server (Job artifact)
      - name: Publish JS Filename
        id: publish #to access data of this step with steps context and id
        run: find dist/assets/*.js -type f -execdir echo 'step-script-file={}' >> $GITHUB_OUTPUT ';' #step-script-file->step output name
        # $GITHUB_OUTPUT: it targets a file, a special file created by GitHub in the environment in which your job runs 
        #                 where the output key-value pair is written to.

        # 'step-script-file={}' >> $GITHUB_OUTPUT: So this overall command simply writes the output to a file, 
        # a file which path is stored in this special variable, which is provided by GitHub Actions.

        # find dist/assets/*.js -type f -execdir echo '{}' ';' #Linux Command that outputs the filename, 
        # but we need to make this available to other jobs, to do so we create an output

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with: #Additional config
          name: dist-files #name of the artifact
          path: dist # A file, directory or wildcard pattern that describes what to upload
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps: 
      - name: Get Build Artifacts
        uses: actions/download-artifact@v4 #download artifact uploaded by previous job
        with:
          name: dist-files #grabs the .zip file and downloads and unzips it here, Note: we lose the dist folder and the files in dist folder are available in this job
      - name: Output Contents
        run: ls #lists all the contents of the folder we currently are in, we'll see we have all the dist files in the folder in which deploy job runs
      - name: Output Filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
